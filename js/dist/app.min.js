/*! ######5878794@qq.com###### */
!function(t){function e(l){if(d[l])return d[l].exports;var c=d[l]={i:l,l:!1,exports:{}};return t[l].call(c.exports,c,c.exports,e),c.l=!0,c.exports}var d={};return e.m=t,e.c=d,e.i=function(t){return t},e.d=function(t,d,l){e.o(t,d)||Object.defineProperty(t,d,{configurable:!1,enumerable:!0,get:l})},e.n=function(t){var d=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(d,"a",d),d},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=1)}([function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*! npm.im/iphone-inline-video 2.0.2 */\nvar enableInlineVideo = function () {\n\t'use strict';\n\n\t/*! npm.im/intervalometer */\n\n\tfunction intervalometer(cb, request, cancel, requestParameter) {\n\t\tvar requestId;\n\t\tvar previousLoopTime;\n\t\tfunction loop(now) {\n\t\t\t// must be requested before cb() because that might call .stop()\n\t\t\trequestId = request(loop, requestParameter);\n\n\t\t\t// called with \"ms since last call\". 0 on start()\n\t\t\tcb(now - (previousLoopTime || now));\n\n\t\t\tpreviousLoopTime = now;\n\t\t}\n\t\treturn {\n\t\t\tstart: function start() {\n\t\t\t\tif (!requestId) {\n\t\t\t\t\t// prevent double starts\n\t\t\t\t\tloop(0);\n\t\t\t\t}\n\t\t\t},\n\t\t\tstop: function stop() {\n\t\t\t\tcancel(requestId);\n\t\t\t\trequestId = null;\n\t\t\t\tpreviousLoopTime = 0;\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction frameIntervalometer(cb) {\n\t\treturn intervalometer(cb, requestAnimationFrame, cancelAnimationFrame);\n\t}\n\n\tfunction preventEvent(element, eventName, toggleProperty, preventWithProperty) {\n\t\tfunction handler(e) {\n\t\t\tif (Boolean(element[toggleProperty]) === Boolean(preventWithProperty)) {\n\t\t\t\te.stopImmediatePropagation();\n\t\t\t\t// console.log(eventName, 'prevented on', element);\n\t\t\t}\n\t\t\tdelete element[toggleProperty];\n\t\t}\n\t\telement.addEventListener(eventName, handler, false);\n\n\t\t// Return handler to allow to disable the prevention. Usage:\n\t\t// const preventionHandler = preventEvent(el, 'click');\n\t\t// el.removeEventHandler('click', preventionHandler);\n\t\treturn handler;\n\t}\n\n\tfunction proxyProperty(object, propertyName, sourceObject, copyFirst) {\n\t\tfunction get() {\n\t\t\treturn sourceObject[propertyName];\n\t\t}\n\t\tfunction set(value) {\n\t\t\tsourceObject[propertyName] = value;\n\t\t}\n\n\t\tif (copyFirst) {\n\t\t\tset(object[propertyName]);\n\t\t}\n\n\t\tObject.defineProperty(object, propertyName, { get: get, set: set });\n\t}\n\n\tfunction proxyEvent(object, eventName, sourceObject) {\n\t\tsourceObject.addEventListener(eventName, function () {\n\t\t\treturn object.dispatchEvent(new Event(eventName));\n\t\t});\n\t}\n\n\tfunction dispatchEventAsync(element, type) {\n\t\tPromise.resolve().then(function () {\n\t\t\telement.dispatchEvent(new Event(type));\n\t\t});\n\t}\n\n\tvar iOS8or9 = (typeof document === 'undefined' ? 'undefined' : _typeof(document)) === 'object' && 'object-fit' in document.head.style && !matchMedia('(-webkit-video-playable-inline)').matches;\n\n\tvar ಠ = 'bfred-it:iphone-inline-video';\n\tvar ಠevent = 'bfred-it:iphone-inline-video:event';\n\tvar ಠplay = 'bfred-it:iphone-inline-video:nativeplay';\n\tvar ಠpause = 'bfred-it:iphone-inline-video:nativepause';\n\n\t/**\n  * UTILS\n  */\n\n\tfunction getAudioFromVideo(video) {\n\t\tvar audio = new Audio();\n\t\tproxyEvent(video, 'play', audio);\n\t\tproxyEvent(video, 'playing', audio);\n\t\tproxyEvent(video, 'pause', audio);\n\t\taudio.crossOrigin = video.crossOrigin;\n\n\t\t// 'data:' causes audio.networkState > 0\n\t\t// which then allows to keep <audio> in a resumable playing state\n\t\t// i.e. once you set a real src it will keep playing if it was if .play() was called\n\t\taudio.src = video.src || video.currentSrc || 'data:';\n\n\t\t// if (audio.src === 'data:') {\n\t\t//   TODO: wait for video to be selected\n\t\t// }\n\t\treturn audio;\n\t}\n\n\tvar lastRequests = [];\n\tvar requestIndex = 0;\n\tvar lastTimeupdateEvent;\n\n\tfunction setTime(video, time, rememberOnly) {\n\t\t// allow one timeupdate event every 200+ ms\n\t\tif ((lastTimeupdateEvent || 0) + 200 < Date.now()) {\n\t\t\tvideo[ಠevent] = true;\n\t\t\tlastTimeupdateEvent = Date.now();\n\t\t}\n\t\tif (!rememberOnly) {\n\t\t\tvideo.currentTime = time;\n\t\t}\n\t\tlastRequests[++requestIndex % 3] = time * 100 | 0 / 100;\n\t}\n\n\tfunction isPlayerEnded(player) {\n\t\treturn player.driver.currentTime >= player.video.duration;\n\t}\n\n\tfunction update(timeDiff) {\n\t\tvar player = this;\n\t\t// console.log('update', player.video.readyState, player.video.networkState, player.driver.readyState, player.driver.networkState, player.driver.paused);\n\t\tif (player.video.readyState >= player.video.HAVE_FUTURE_DATA) {\n\t\t\tif (!player.hasAudio) {\n\t\t\t\tplayer.driver.currentTime = player.video.currentTime + timeDiff * player.video.playbackRate / 1000;\n\t\t\t\tif (player.video.loop && isPlayerEnded(player)) {\n\t\t\t\t\tplayer.driver.currentTime = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tsetTime(player.video, player.driver.currentTime);\n\t\t} else if (player.video.networkState === player.video.NETWORK_IDLE && player.video.buffered.length === 0) {\n\t\t\t// this should happen when the source is available but:\n\t\t\t// - it's potentially playing (.paused === false)\n\t\t\t// - it's not ready to play\n\t\t\t// - it's not loading\n\t\t\t// If it hasAudio, that will be loaded in the 'emptied' handler below\n\t\t\tplayer.video.load();\n\t\t\t// console.log('Will load');\n\t\t}\n\n\t\t// console.assert(player.video.currentTime === player.driver.currentTime, 'Video not updating!');\n\n\t\tif (player.video.ended) {\n\t\t\tdelete player.video[ಠevent]; // allow timeupdate event\n\t\t\tplayer.video.pause(true);\n\t\t}\n\t}\n\n\t/**\n  * METHODS\n  */\n\n\tfunction play() {\n\t\t// console.log('play');\n\t\tvar video = this;\n\t\tvar player = video[ಠ];\n\n\t\t// if it's fullscreen, use the native player\n\t\tif (video.webkitDisplayingFullscreen) {\n\t\t\tvideo[ಠplay]();\n\t\t\treturn;\n\t\t}\n\n\t\tif (player.driver.src !== 'data:' && player.driver.src !== video.src) {\n\t\t\t// console.log('src changed on play', video.src);\n\t\t\tsetTime(video, 0, true);\n\t\t\tplayer.driver.src = video.src;\n\t\t}\n\n\t\tif (!video.paused) {\n\t\t\treturn;\n\t\t}\n\t\tplayer.paused = false;\n\n\t\tif (video.buffered.length === 0) {\n\t\t\t// .load() causes the emptied event\n\t\t\t// the alternative is .play()+.pause() but that triggers play/pause events, even worse\n\t\t\t// possibly the alternative is preventing this event only once\n\t\t\tvideo.load();\n\t\t}\n\n\t\tplayer.driver.play();\n\t\tplayer.updater.start();\n\n\t\tif (!player.hasAudio) {\n\t\t\tdispatchEventAsync(video, 'play');\n\t\t\tif (player.video.readyState >= player.video.HAVE_ENOUGH_DATA) {\n\t\t\t\t// console.log('onplay');\n\t\t\t\tdispatchEventAsync(video, 'playing');\n\t\t\t}\n\t\t}\n\t}\n\tfunction pause(forceEvents) {\n\t\t// console.log('pause');\n\t\tvar video = this;\n\t\tvar player = video[ಠ];\n\n\t\tplayer.driver.pause();\n\t\tplayer.updater.stop();\n\n\t\t// if it's fullscreen, the developer the native player.pause()\n\t\t// This is at the end of pause() because it also\n\t\t// needs to make sure that the simulation is paused\n\t\tif (video.webkitDisplayingFullscreen) {\n\t\t\tvideo[ಠpause]();\n\t\t}\n\n\t\tif (player.paused && !forceEvents) {\n\t\t\treturn;\n\t\t}\n\n\t\tplayer.paused = true;\n\t\tif (!player.hasAudio) {\n\t\t\tdispatchEventAsync(video, 'pause');\n\t\t}\n\t\tif (video.ended) {\n\t\t\tvideo[ಠevent] = true;\n\t\t\tdispatchEventAsync(video, 'ended');\n\t\t}\n\t}\n\n\t/**\n  * SETUP\n  */\n\n\tfunction addPlayer(video, hasAudio) {\n\t\tvar player = video[ಠ] = {};\n\t\tplayer.paused = true; // track whether 'pause' events have been fired\n\t\tplayer.hasAudio = hasAudio;\n\t\tplayer.video = video;\n\t\tplayer.updater = frameIntervalometer(update.bind(player));\n\n\t\tif (hasAudio) {\n\t\t\tplayer.driver = getAudioFromVideo(video);\n\t\t} else {\n\t\t\tvideo.addEventListener('canplay', function () {\n\t\t\t\tif (!video.paused) {\n\t\t\t\t\t// console.log('oncanplay');\n\t\t\t\t\tdispatchEventAsync(video, 'playing');\n\t\t\t\t}\n\t\t\t});\n\t\t\tplayer.driver = {\n\t\t\t\tsrc: video.src || video.currentSrc || 'data:',\n\t\t\t\tmuted: true,\n\t\t\t\tpaused: true,\n\t\t\t\tpause: function pause() {\n\t\t\t\t\tplayer.driver.paused = true;\n\t\t\t\t},\n\t\t\t\tplay: function play() {\n\t\t\t\t\tplayer.driver.paused = false;\n\t\t\t\t\t// media automatically goes to 0 if .play() is called when it's done\n\t\t\t\t\tif (isPlayerEnded(player)) {\n\t\t\t\t\t\tsetTime(video, 0);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tget ended() {\n\t\t\t\t\treturn isPlayerEnded(player);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\t// .load() causes the emptied event\n\t\tvideo.addEventListener('emptied', function () {\n\t\t\t// console.log('driver src is', player.driver.src);\n\t\t\tvar wasEmpty = !player.driver.src || player.driver.src === 'data:';\n\t\t\tif (player.driver.src && player.driver.src !== video.src) {\n\t\t\t\t// console.log('src changed to', video.src);\n\t\t\t\tsetTime(video, 0, true);\n\t\t\t\tplayer.driver.src = video.src;\n\t\t\t\t// playing videos will only keep playing if no src was present when .play()’ed\n\t\t\t\tif (wasEmpty) {\n\t\t\t\t\tplayer.driver.play();\n\t\t\t\t} else {\n\t\t\t\t\tplayer.updater.stop();\n\t\t\t\t}\n\t\t\t}\n\t\t}, false);\n\n\t\t// stop programmatic player when OS takes over\n\t\tvideo.addEventListener('webkitbeginfullscreen', function () {\n\t\t\tif (!video.paused) {\n\t\t\t\t// make sure that the <audio> and the syncer/updater are stopped\n\t\t\t\tvideo.pause();\n\n\t\t\t\t// play video natively\n\t\t\t\tvideo[ಠplay]();\n\t\t\t} else if (hasAudio && player.driver.buffered.length === 0) {\n\t\t\t\t// if the first play is native,\n\t\t\t\t// the <audio> needs to be buffered manually\n\t\t\t\t// so when the fullscreen ends, it can be set to the same current time\n\t\t\t\tplayer.driver.load();\n\t\t\t}\n\t\t});\n\t\tif (hasAudio) {\n\t\t\tvideo.addEventListener('webkitendfullscreen', function () {\n\t\t\t\t// sync audio to new video position\n\t\t\t\tplayer.driver.currentTime = video.currentTime;\n\t\t\t\t// console.assert(player.driver.currentTime === video.currentTime, 'Audio not synced');\n\t\t\t});\n\n\t\t\t// allow seeking\n\t\t\tvideo.addEventListener('seeking', function () {\n\t\t\t\tif (lastRequests.indexOf(video.currentTime * 100 | 0 / 100) < 0) {\n\t\t\t\t\t// console.log('User-requested seeking');\n\t\t\t\t\tplayer.driver.currentTime = video.currentTime;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tfunction overloadAPI(video) {\n\t\tvar player = video[ಠ];\n\t\tvideo[ಠplay] = video.play;\n\t\tvideo[ಠpause] = video.pause;\n\t\tvideo.play = play;\n\t\tvideo.pause = pause;\n\t\tproxyProperty(video, 'paused', player.driver);\n\t\tproxyProperty(video, 'muted', player.driver, true);\n\t\tproxyProperty(video, 'playbackRate', player.driver, true);\n\t\tproxyProperty(video, 'ended', player.driver);\n\t\tproxyProperty(video, 'loop', player.driver, true);\n\t\tpreventEvent(video, 'seeking');\n\t\tpreventEvent(video, 'seeked');\n\t\tpreventEvent(video, 'timeupdate', ಠevent, false);\n\t\tpreventEvent(video, 'ended', ಠevent, false); // prevent occasional native ended events\n\t}\n\n\tfunction enableInlineVideo(video, opts) {\n\t\tif (opts === void 0) opts = {};\n\n\t\t// Stop if already enabled\n\t\tif (video[ಠ]) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Allow the user to skip detection\n\t\tif (!opts.everywhere) {\n\t\t\t// Only iOS8 and 9 are supported\n\t\t\tif (!iOS8or9) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Stop if it's not an allowed device\n\t\t\tif (!(opts.iPad || opts.ipad ? /iPhone|iPod|iPad/ : /iPhone|iPod/).test(navigator.userAgent)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// Stop native playback\n\t\tif (!video.paused && video.webkitDisplayingFullscreen) {\n\t\t\tvideo.pause();\n\t\t}\n\n\t\taddPlayer(video, !video.muted);\n\t\toverloadAPI(video);\n\t\tvideo.classList.add('IIV');\n\n\t\t// Autoplay\n\t\tif (video.muted && video.autoplay) {\n\t\t\tvideo.play();\n\t\t}\n\n\t\tif (!/iPhone|iPod|iPad/.test(navigator.platform)) {\n\t\t\tconsole.warn('iphone-inline-video is not guaranteed to work in emulated environments');\n\t\t}\n\t}\n\n\treturn enableInlineVideo;\n}();\n\nmodule.exports = enableInlineVideo;//# sourceMappingURL=data:application/json;charset=utf-8;base64,")},function(module,exports,__webpack_require__){"use strict";eval('\n\nvar video111 = __webpack_require__(/*! ./lib/ui/video */ 0);\n\n$(document).ready(function () {\n\t// bens = video;\n\t// video({\n\t// \tdom:$("#video"),     //要插入的dom\n\t// \tvideoSrc:"fll.mp4",  //视频地址\n\t// \tautoPlay:false,    //自动播放\n\t// \tloop:true,       //循环播放\n\t// \tmuted:false,     //是否静音\n\t// \tisCordova:false   //是否是在cordova中使用\n\t// });\n\n\tvar video = $("video").get(0);\n\tvideo111(video);\n\t// setTimeout(()=>{\n\t// \t$("video").get(0).play();\n\t// },1000)\n\tvideo.addEventListener(\'touchstart\', function () {\n\t\tvideo.play();\n\t});\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvanMvaW5pdC5lczY/OTBhZiJdLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgdmlkZW8xMTEgPSByZXF1aXJlKFwiLi9saWIvdWkvdmlkZW9cIik7XG5cblxuXG4kKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpe1xuXHQvLyBiZW5zID0gdmlkZW87XG5cdC8vIHZpZGVvKHtcblx0Ly8gXHRkb206JChcIiN2aWRlb1wiKSwgICAgIC8v6KaB5o+S5YWl55qEZG9tXG5cdC8vIFx0dmlkZW9TcmM6XCJmbGwubXA0XCIsICAvL+inhumikeWcsOWdgFxuXHQvLyBcdGF1dG9QbGF5OmZhbHNlLCAgICAvL+iHquWKqOaSreaUvlxuXHQvLyBcdGxvb3A6dHJ1ZSwgICAgICAgLy/lvqrnjq/mkq3mlL5cblx0Ly8gXHRtdXRlZDpmYWxzZSwgICAgIC8v5piv5ZCm6Z2Z6Z+zXG5cdC8vIFx0aXNDb3Jkb3ZhOmZhbHNlICAgLy/mmK/lkKbmmK/lnKhjb3Jkb3Zh5Lit5L2/55SoXG5cdC8vIH0pO1xuXG5cdHZhciB2aWRlbyA9ICQoXCJ2aWRlb1wiKS5nZXQoMCk7XG5cdHZpZGVvMTExKHZpZGVvKTtcblx0Ly8gc2V0VGltZW91dCgoKT0+e1xuXHQvLyBcdCQoXCJ2aWRlb1wiKS5nZXQoMCkucGxheSgpO1xuXHQvLyB9LDEwMDApXG5cdHZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBmdW5jdGlvbiAoKSB7XG5cdFx0dmlkZW8ucGxheSgpO1xuXHR9KTtcblxufSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2pzL2luaXQuZXM2Il0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBIiwic291cmNlUm9vdCI6IiJ9');
}]);